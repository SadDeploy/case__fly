//
// Mixins -> Grids
// ------------------------------------

@if $use-flexbox == true {

  @mixin make-row($gutter: $grid-gutter-width) {
    display: -webkit-box;
    display: -moz-box;
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
    -webkit-flex: 0 1 auto;
    -ms-flex: 0 1 auto;
    -webkit-box-flex: 0;
    flex: 0 1 auto;
    -webkit-flex-direction: row;
    -ms-flex-direction: row;
    -webkit-box-orient: horizontal;
    -webkit-box-direction: normal;
    flex-direction: row;
    -webkit-flex-wrap: wrap;
    -moz-flex-wrap: wrap;
    -ms-flex-wrap: wrap;
    -o-flex-wrap: wrap;
    flex-wrap: wrap;
    margin-left: ($gutter / -2);
    margin-right: ($gutter / -2);
  }

  @mixin make-column($gutter: $grid-gutter-width) {
    -webkit-flex: 0 0 auto;
    -ms-flex: 0 0 auto;
    -webkit-box-flex: 0;
    flex: 0 0 auto;
    padding-left: ($gutter / 2);
    padding-right: ($gutter / 2);
  }

  @mixin float-grid-columns($class, $i: 1, $list: ".cell__#{$class}-#{$i}") {
    @for $i from (1 + 1) through $grid-columns {
      $list: "#{$list}, .cell__#{$class}-#{$i}";
    }
  }

  @mixin calc-grid-column($index, $class, $type) {
    @if ($type == width) and ($index > 0) {
      .cell__#{$class}-#{$index} {
        -ms-flex-preferred-size: percentage(($index / $grid-columns));
        -webkit-flex-basis: percentage(($index / $grid-columns));
        flex-basis: percentage(($index / $grid-columns));
        max-width: percentage(($index / $grid-columns));
      }
    }
  }
  @mixin calc-prop-column($index, $class, $type) {
    @if ($type == start) {
      .start__#{$class} {
        -webkit-justify-content: flex-start;
        -ms-flex-pack: start;
        justify-content: flex-start;
        text-align: start;
      }
    }
    @if ($type == end) {
      .end__#{$class} {
        -webkit-justify-content: flex-end;
        -ms-flex-pack: end;
        justify-content: flex-end;
        text-align: end;
      }
    }
    @if ($type == center) {
      .center__#{$class} {
        -webkit-justify-content: center;
        -ms-flex-pack: center;
        justify-content: center;
        text-align: center;
      }
    }
    @if ($type == top) {
      .top__#{$class} {
        -webkit-align-items: flex-start;
        -ms-flex-align: start;
        align-items: flex-start;
      }
    }
    @if ($type == middle) {
      .middle__#{$class} {
        -webkit-align-items: center;
        -ms-flex-align: center;
        align-items: center;
      }
    }
    @if ($type == bottom) {
      .bottom__#{$class} {
        -webkit-align-items: flex-end;
        -ms-flex-align: end;
        align-items: flex-end;
      }
    }
    @if ($type == around) {
      .around__#{$class} {
        -webkit-justify-content: space-around;
        -ms-flex-pack: distribute;
        justify-content: space-around;
      }
    }
    @if ($type == between) {
      .between__#{$class} {
        -webkit-justify-content: space-between;
        -ms-flex-pack: justify;
        justify-content: space-between;
      }
    }
    @if ($type == first) {
      .first__#{$class} {
        -webkit-order: -1;
        -ms-flex-order: -1;
        order: -1;
      }
    }
    @if ($type == last) {
      .last__#{$class} {
        -webkit-order: 1;
        -ms-flex-order: 1;
        order: 1;
      }
    }
  }

  @mixin loop-grid-columns($columns, $class, $type) {
    @for $i from 0 through $columns {
      @include calc-grid-column($i, $class, $type);
    }
    @for $i from 0 through 0 {
      @include calc-prop-column($i, $class, $type);
    }
  }

  @mixin make-grid($class) {
    @include float-grid-columns($class);
    @include loop-grid-columns($grid-columns, $class, width);
    @include loop-grid-columns($grid-columns, $class, start);
    @include loop-grid-columns($grid-columns, $class, center);
    @include loop-grid-columns($grid-columns, $class, end);
    @include loop-grid-columns($grid-columns, $class, top);
    @include loop-grid-columns($grid-columns, $class, middle);
    @include loop-grid-columns($grid-columns, $class, bottom);
    @include loop-grid-columns($grid-columns, $class, around);
    @include loop-grid-columns($grid-columns, $class, between);
    @include loop-grid-columns($grid-columns, $class, first);
    @include loop-grid-columns($grid-columns, $class, last);
  }
} @else {

  @mixin container-fixed($gutter: $grid-gutter-width) {
    margin-right: auto;
    margin-left: auto;
    padding-left: ($gutter / 2);
    padding-right: ($gutter / 2);
    @include clearfix;
  }

  @mixin make-row($gutter: $grid-gutter-width) {
    margin-left: floor(($gutter / -2));
    margin-right: floor(($gutter / -2));
    @include clearfix;
  }

  @mixin make-column($gutter: $grid-gutter-width) {
    position: relative;
    float: left;
    min-height: 1px;
    padding-left: ($gutter / 2);
    padding-right: ($gutter / 2);
  }

  @mixin make-xs-column($columns, $gutter: $grid-gutter-width) {
    width: percentage(($columns / $grid-columns));
  }

  @mixin make-sm-column($columns, $gutter: $grid-gutter-width) {
    @media (min-width: $screen-sm-min) {
      width: percentage(($columns / $grid-columns));
    }
  }

  @mixin make-md-column($columns, $gutter: $grid-gutter-width) {
    @media (min-width: $screen-md-min) {
      width: percentage(($columns / $grid-columns));
    }
  }

  @mixin make-lg-column($columns, $gutter: $grid-gutter-width) {
    @media (min-width: $screen-lg-min) {
      width: percentage(($columns / $grid-columns));
    }
  }

  @mixin float-grid-columns($class, $i: 1, $list: ".cell__#{$class}-#{$i}") {
    @for $i from (1 + 1) through $grid-columns {
      $list: "#{$list}, .cell__#{$class}-#{$i}";
    }
  }

  @mixin calc-grid-column($index, $class, $type) {
    @if ($type == width) and ($index > 0) {
      .cell__#{$class}-#{$index} {
        width: percentage(($index / $grid-columns));
      }
    }
  }

  @mixin loop-grid-columns($columns, $class, $type) {
    @for $i from 0 through $columns {
      @include calc-grid-column($i, $class, $type);
    }
  }

  @mixin make-grid($class) {
    @include float-grid-columns($class);
    @include loop-grid-columns($grid-columns, $class, width);
  }
}
